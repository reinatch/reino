/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ./ferret.glb 
*/
import * as THREE from "three";
import React, { RefObject, useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useGraph, useLoader } from "@react-three/fiber";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { Group } from "three";
import { SkeletonUtils } from "three-stdlib";
import { VertexNormalsHelper } from "three-stdlib";

interface ModelProps {
  key: string;
  position: number[];
  generateRandomNumber: (actions: any) => void;
}
const actionss = ["IDLE", "WALK", "RUN"];
export default function Model({
  position,
  generateRandomNumber,
}: ModelProps): JSX.Element {
  const group = useRef<Group | null>(null);
  // const gltf = useLoader(GLTFLoader, "/ferret.glb");
  // const { scene, materials, animations } = useGLTF('/ferret.glb') as GLTF;
  const gltf = useLoader(GLTFLoader, "/locoO.glb");
  const anim = useLoader(GLTFLoader, "/capo-animation.glb");
  const clone = useMemo(() => SkeletonUtils.clone(gltf.scene), [gltf.scene]);
  const { nodes } = useGraph(clone);
  const { actions } = useAnimations(gltf.animations, group);
  const [randomNumber, setRandomNumber] = useState(0);
  const [action, setAction] = useState(actionss[randomNumber]);
  console.log(gltf);
  useEffect(() => {
    // Set an initial animation action
    const initialAction = actions[action];
    if (initialAction) {
      initialAction.play();
      initialAction.fadeIn(0.2);
    }
  }, [action, actions]);

  useEffect(() => {
    const directionInterval = setInterval(() => {
      group.current?.lookAt(
        new THREE.Vector3(
          Math.floor(
            Math.random() * (Math.round(Math.random()) ? 2500 : -2500)
          ),
          -2.5,
          Math.floor(Math.random() * (Math.round(Math.random()) ? 2500 : -2500))
        )
      );
    }, 1000 * Math.floor(Math.random() * 120));

    return () => clearInterval(directionInterval);
  }, [group]);

  useFrame((state, delta) => {
    group.current?.translateX(-0.5);
  });
  return (
    <group
      ref={group}
      dispose={null}
      onClick={() => generateRandomNumber(actions)}
    >
      <group name="Scene">
        <group
          name="Armature001"
          position={[0, 0, 0]}
          rotation={[1.5, 0, 0]}
          scale={1}
        >
          <primitive object={nodes.mixamorig10Hips} />
          <group name="Cube">
            <skinnedMesh
              name="Ch28_Body"
              geometry={(nodes.Ch28_Body as THREE.SkinnedMesh).geometry}
              material={(nodes.Ch28_Body as THREE.SkinnedMesh).material}
              skeleton={(nodes.Ch28_Body as THREE.SkinnedMesh).skeleton}
            />
            <skinnedMesh
              name="Ch28_Eyelashes"
              geometry={(nodes.Ch28_Eyelashes as THREE.SkinnedMesh).geometry}
              material={(nodes.Ch28_Hair as THREE.SkinnedMesh).material}
              skeleton={(nodes.Ch28_Eyelashes as THREE.SkinnedMesh).skeleton}
            />
            <skinnedMesh
              name="Ch28_Hair"
              geometry={(nodes.Ch28_Hair as THREE.SkinnedMesh).geometry}
              material={(nodes.Ch28_Hair as THREE.SkinnedMesh).material}
              skeleton={(nodes.Ch28_Hair as THREE.SkinnedMesh).skeleton}
            />
            <skinnedMesh
              name="Ch28_Hoody"
              geometry={(nodes.Ch28_Hoody as THREE.SkinnedMesh).geometry}
              material={gltf.materials["Ch28_body"]}
              skeleton={(nodes.Ch28_Hoody as THREE.SkinnedMesh).skeleton}
            />
            <skinnedMesh
              name="Ch28_Pants"
              geometry={(nodes.Ch28_Pants as THREE.SkinnedMesh).geometry}
              material={gltf.materials["Ch28_body"]}
              skeleton={(nodes.Ch28_Pants as THREE.SkinnedMesh).skeleton}
            />
            <skinnedMesh
              name="Ch28_Sneakers"
              geometry={(nodes.Ch28_Sneakers as THREE.SkinnedMesh).geometry}
              material={gltf.materials["Ch28_body"]}
              skeleton={(nodes.Ch28_Sneakers as THREE.SkinnedMesh).skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}
useGLTF.preload("/ferret.glb");
